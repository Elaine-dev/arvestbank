<?php

/**
 * @file
 * Arvestbank theme file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Render\Markup;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_form_alter().
 */
function arvestbank_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add placeholder to search block form input.
  if ($form_id === 'search_block_form') {
    $form['keys']['#attributes']['placeholder'] = t('Search');
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * @inheritDoc
 */
function arvestbank_theme_preprocess_html(&$variables) {
  // Add node ID to the body class.
  $node = \Drupal::routeMatch()->getParameter('node');
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (is_object($node)) {
    $variables['attributes']['class'][] = 'node-' . $node->id();
  }
  if ($route_name === 'arvestbank_calculators.iframe' && $variables['page']['content']['#title'] === 'Calculator') {
    $node = $variables['page']['content']['#object'];
    $calc_id = $node->field_calculator->getValue();
    $variables['calc_title'] = $calc_id[0]['target_id'] . '|' . 'Arvest Bank';
  }

}

/**
 * Implements hook_preprocess_node().
 *
 * @inheritDoc
 */
function arvestbank_theme_preprocess_node(&$variables) {

  // If this is the homepage and the node is the main homepage one.
  if (
    \Drupal::service('path.matcher')->isFrontPage()
    && $variables['view_mode'] = 'full'
  ) {
    // Load external login block.
    $block = Block::load('homepageexternalloginblock');
    $renderedBlock = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
    // Make the external login block available in node template.
    $variables['content']['external_login_block'] = $renderedBlock;
  }
  if($variables['node']->getType() == 'stage_page') {
    // Load local admin tabs block only for stage page content type.
    $block = Block::load('arvestbank_theme_local_tasks');
    $renderedBlock = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
    // Make the local admin tabs block available in node template.
    $variables['content']['arvestbank_theme_local_tasks'] = $renderedBlock;
    // Load the sidebar block.
    $block = Block::load('stagepagesidebarblock');
    if (!empty($block)) {
      $renderedBlock = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($block);
      // Make the external login block available in node template.
      $variables['content']['stagepage_sidebar_block'] = $renderedBlock;
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 *
 * @inheritDoc
 */
function arvestbank_theme_preprocess_menu(&$variables, $hook) {

  // If this is the social media menu.
  if ($hook == 'menu' && $variables['menu_name'] == 'social-media-menu') {

    // Loop over menu items in this menu.
    foreach ($variables['items'] as $menu_item_key => $menu_item) {
      // Get plugin definition for this menu item.
      $plugin_definition = $menu_item['original_link']->getPluginDefinition();
      // If this menu item has an icon selected.
      if (
        isset($plugin_definition['options']['attributes']['data-icon'])
        && $plugin_definition['options']['attributes']['data-icon'] != ''
      ) {

        // Get the variables we'll need for building icon render array.
        $selected_icon = $plugin_definition['options']['attributes']['data-icon'];
        $theme_path = \Drupal::theme()->getActiveTheme()->getPath();

        // Replace link text with icon.
        $variables['items'][$menu_item_key]['title'] = [
          '#theme' => 'image',
          '#uri' => $theme_path . '/images/social_icons/' . $selected_icon . '.png',
          '#alt' => $selected_icon,
          '#title' => $selected_icon,
        ];
      }
    }

  }

}

/**
 * Block - Featured Carousel
 * - Implements template_preprocess_block().
 * - @param $variables
 */
function arvestbank_theme_preprocess_block_feature_carousel(&$variables) {
  if (!empty($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block\Entity\Block $block */
    $block = $variables['elements']['content']['#block_content'];
    $slides = [];
    // Build Array for Glider slides
    if ($block->hasField('field_p_feature_items') && !$block->get('field_p_feature_items')->isEmpty()) {
      $elements = $block->get('field_p_feature_items');
      foreach ($elements as $key => $slide) {
        $media = $slide->entity->field_icon->entity;
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');
        $slides[] = [
          'slide_icon' => $view_builder->view($media, 'x_small_square'),
          'slide_title' => $slide->entity->field_nav_title->value,
          'slide_content' => $slide->view('default'),
        ];
      }
      $variables['slides'] = $slides;
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function arvestbank_theme_preprocess_field__body(&$variables, $hook) {

  // If we have a value that contains a rate token.
  if (
    isset($variables['items'][0]['content']['#text'])
    && (
      strpos($variables['items'][0]['content']['#text'], '[arvestbank_rates:')
      || strpos($variables['items'][0]['content']['#text'], '[arvestbank_phone_numbers:')
    )
  ) {

    // Load token service.
    $tokenService = \Drupal::token();

    // Do replacement.
    $replacedText = $tokenService->replace(
      $variables['items'][0]['content']['#text']
    );

    // If we had tokens we replaced.
    if ($replacedText != $variables['items'][0]['content']['#text']) {

      // Add a cache tag for the rates config.
      $variables['#cache']['tags'][] = 'config:arvestbank_rates.settings';

      // Add replaced text to render array.
      $variables['items'][0]['content']['#text'] = $replacedText;

    }

  }

  // Add background color class for node revisions.
  $current_route = \Drupal::routeMatch()->getRouteName();
  if ($current_route == 'entity.node.revision') {
    $variables['attributes']['class'][] = 'revision-bg-color';
  }

}

/**
 * Implements hook_preprocess_field().
 */
function arvestbank_theme_preprocess_field__field_print_button_text(&$variables, $hook) {

  // Initialize a variable to return something at all be pessimistic.
  $show_print = FALSE;

  // Wrap the print text in button and javascript window print.
  if (!empty($variables['items'][0]['content'])) {
    if ($node = $variables['element']['#object']) {
      if ($node->hasField('field_page_type')) {
        $page_type = $node->get('field_page_type')->getValue();
        // Check that the page type is "Disclosure".
        if (!empty($page_type[0]['value'])
          && $page_type[0]['value'] == 'disclosure')
        {
          $show_print = TRUE;
        }
      }
      else if ($node->getType() === 'calculators') {
        $show_print = TRUE;
      }
    }
  }

  // Check our show print, and button wrap if TRUE or unset.
  if ($show_print) {
    $variables['items'][0]['content']['#prefix'] = Markup::create('<button onClick="window.print();">');
    $variables['items'][0]['content']['#suffix'] = Markup::create('</button>');
  }
  else {
    unset($variables['items'][0]);
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function arvestbank_theme_theme_suggestions_filter_caption_alter(array &$suggestions, array $variables, $hook) {
  $html = Html::load($variables['node']->__toString());
  foreach($html->getElementsByTagName('drupal-media') as $drupal_media) {
    $view_mode = $drupal_media->getAttribute('data-view-mode');
    $suggestions[] = 'filter_caption__media__' . $view_mode;
  }
}
