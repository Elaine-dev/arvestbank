<?php

/**
 * @file
 * Hooks relating to arvestbank rates.
 */

use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Entity\EntityInterface;
use Sunra\PhpSimple\HtmlDomParser;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_token_info().
 */
function arvestbank_rates_token_info() {

  // Instantiate tokens array with token group.
  $info = [
    'types' => [
      'arvestbank_rates' => [
        'name' => t('Arvest Bank Rates'),
        'description' => t('Tokens containing credit card rates.'),
      ],
    ],
    'tokens' => [
      'arvestbank_rates' => [],
    ],
  ];

  // Get Rates config.
  $ratesConfigValues = \Drupal::config('arvestbank_rates.settings')->getOriginal();

  // Loop over config variables.
  foreach ($ratesConfigValues as $rateConfigKey => $rateConfigValue) {

    // Decide on human name for config variable.
    $tokenHumanName = ucwords(str_replace(['__', '_'], [' - ', ' '], $rateConfigKey));

    // Add config variable to arvestbank_rates token group.
    $info['tokens']['arvestbank_rates'][$rateConfigKey] = [
      'name' => $tokenHumanName,
      'description' => $tokenHumanName,
    ];

  }

  return $info;
}

/**
 * Implements hook_tokens().
 *
 * @inheritDoc
 */
function arvestbank_rates_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {

  $replacements = [];

  // Get Rates config.
  $ratesConfigValues = \Drupal::config('arvestbank_rates.settings')->getOriginal();

  // Define date tokens and what format we want them in.
  $dateTokenFormats = [
    'rewards_card_rates__accurate_as_of_date' => 'F j, Y',
    'true_rate_card_rates__accurate_as_of_date' => 'F j, Y',
    'origin_card_rates__accurate_as_of_date' => 'F j, Y',
    'legacy_card_rates__accurate_as_of_date' => 'F j, Y',
  ];

  // Define the decimal places for decimal tokens.
  $rateTokenDecimalPlaces = [
    // Three decimal places for mortgage APRs.
    'mortgage_rates__conventional_15yr_fixed__apr' => 3,
    'mortgage_rates__conventional_30yr_fixed__apr' => 3,
    'mortgage_rates__fha_30yr_fixed___apr' => 3,
    'mortgage_rates__va_30yr_fixed__apr' => 3,
    // Two decimal places for mortgage payments.
    'mortgage_rates__conventional_15yr_fixed__payment' => 2,
    'mortgage_rates__conventional_30yr_fixed__payment' => 2,
    'mortgage_rates__fha_30yr_fixed___payment' => 2,
    'mortgage_rates__va_30yr_fixed__payment' => 2,
    // Three decimal places for mortgage rates.
    'mortgage_rates__conventional_15yr_fixed__rate' => 3,
    'mortgage_rates__conventional_30yr_fixed__rate' => 3,
    'mortgage_rates__fha_30yr_fixed___rate' => 3,
    'mortgage_rates__va_30yr_fixed__rate' => 3,
  ];

  // Loop over tokens that need replacing.
  foreach ($tokens as $name => $original) {

    // If we have a config value with the same name as this token.
    if (isset($ratesConfigValues[$name])) {

      // If it's an explicitly set date token.
      if (isset($dateTokenFormats[$name])) {
        // Replace with formatted date.
        $replacements[$original] = date(
          $dateTokenFormats[$name],
          strtotime($ratesConfigValues[$name])
        );
      }
      // If it's a deposit rate effective date token.
      elseif (preg_match('/__effectivedate$/', $name)) {
        $replacements[$original] = date(
          'F j, Y',
          strtotime($ratesConfigValues[$name])
        );
      }
      // If it's a token we want to set decimal places for.
      elseif (isset($rateTokenDecimalPlaces[$name])) {
        // Replace with formatted number.
        $replacements[$original] = number_format(
          $ratesConfigValues[$name],
          $rateTokenDecimalPlaces[$name]
        );
      }
      // If it's a normal nondate token.
      else {
        // Replace with unaltered config value.
        $replacements[$original] = $ratesConfigValues[$name];
      }

    }

  }

  return $replacements;
}

/**
 * Implements hook_entity_presave().
 *
 * Populates rendered node field for applicable nodes.
 *
 * @inheritDoc
 */
function arvestbank_rates_entity_presave(EntityInterface $entity) {

  // If the entity is a node and has our "rendered node" field.
  if (
    $entity->getEntityTypeId() == 'node'
    && $entity->hasField('field_rendered_node')
  ) {

    // Get render array for node.
    $nodeRenderArray = \Drupal::entityTypeManager()
      ->getViewBuilder('node')
      ->view($entity, 'full');

    // Get the current active theme so we can switch back to it later.
    $currentActiveTheme = \Drupal::theme()->getActiveTheme();
    // Get the front end theme as an "ActiveTheme".
    $activeTheme = \Drupal::service('theme.initialization')->getActiveThemeByName('arvestbank_theme');
    // Set active theme to front end.
    \Drupal::theme()->setActiveTheme($activeTheme);
    // Before we render the node invalidate cache tags so we get new data.
    Cache::invalidateTags($entity->getCacheTagsToInvalidate());
    // If we have a render context (not run from drush).
    if (\Drupal::service('renderer')->hasRenderContext()) {
      // Render node with front end theme.
      $renderedNode = \Drupal::service('renderer')->render($nodeRenderArray)->__toString();
    }
    // If we don't have a render context (run from drush).
    else {
      // Render node with front end theme.
      $renderedNode = \Drupal::service('renderer')->renderPlain($nodeRenderArray)->__toString();
    }
    // Set active theme back to what it was.
    \Drupal::theme()->setActiveTheme($currentActiveTheme);

    // Load the rendered node markup into the dom parser.
    $nodeDom = HtmlDomParser::str_get_html($renderedNode);

    // Get content div of the rendered node.
    $renderedNodeContent = '';
    foreach ($nodeDom->find('.coh-main-view-content-column') as $element) {
      $renderedNodeContent .= $element->innertext();
    }

    // If we didn't find content that way save the whole thing.
    if ($renderedNodeContent == '') {
      $renderedNodeContent = $renderedNode;
    }

    // Set the field value.
    $entity->set('field_rendered_node', $renderedNodeContent);

  }

}

/**
 * Implements hook_cron().
 *
 * Updates deposit rates daily.
 *
 * @inheritDoc
 */
function arvestbank_rates_cron() {

  // Get the last time this cron decided to run it's import.
  $lastFetch = \Drupal::state()->get('arvestbank_rates.last_import', 0);

  // If we last ran our action a day or more ago.
  if (REQUEST_TIME - $lastFetch >= 86400) {

    // Get deposit rates helper.
    $depositRatesHelper = \Drupal::service('arvestbank_rates.deposit_rates_helper');
    // Update Deposit Rates.
    $depositRatesHelper->updateDepositRates();

    // Get mortgage rates helper.
    $mortgageRatesHelper = \Drupal::service('arvestbank_rates.mortgage_rates_helper');
    // Update Mortgage Rates.
    $mortgageRatesHelper->updateMortgageRates();

    // Record that we just ran that import.
    \Drupal::state()->set('arvestbank_rates.last_import', REQUEST_TIME);

  }

}
