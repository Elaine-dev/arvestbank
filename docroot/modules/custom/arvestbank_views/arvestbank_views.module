<?php

/**
 * @file
 * Contains arvestbank_view.module.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the view exposed filters.
 */
function arvestbank_views_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // If not the view we are looking, move on
  $altered_forms = [
    'views-exposed-form-advisors-block-1',
    'views-exposed-form-mortgage-loan-officer-block-mortgage-block',
    'views-exposed-form-trust-and-estate-block-block-3',
    'views-exposed-form-specialty-debit-cards-page-1',
  ];
  if (!in_array($form['#id'], $altered_forms)) {
    return FALSE;
  }

  // Return nodes based on the associate type.
  $term_name = NULL;
  $select_option = NULL;
  switch ($form['#id']) {
    case 'views-exposed-form-advisors-block-1':
      $term_name = 'Advisors';
      $select_option = 'Select Advisor';
      break;
    case 'views-exposed-form-mortgage-loan-officer-block-mortgage-block':
      $term_name = 'Lenders';
      $select_option = 'Select Loan Officer';
      break;
    case 'views-exposed-form-trust-and-estate-block-block-3':
      $term_name = 'Trust Officers';
      $select_option = 'Select Name...';
      break;
  }

  if ($form['#id'] === 'views-exposed-form-specialty-debit-cards-page-1') {
    module_load_include('inc', 'arvestbank_views', 'inc/arvestbank_views.debit_cards_filter');
    $form = arvestbank_views_debit_cards_filter($form);
    return $form;
  }


  $term = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => ($term_name)]);
  $termId = reset($term)->id();

  // Query nodes
  $storage = Drupal::getContainer()
    ->get('entity_type.manager')
    ->getStorage('node');
  $nids = $storage->getQuery();

  // Gather published associate nodes and sort by title
  $nids = $nids->condition('type', 'associate')
    ->condition('status', 1)
    ->condition('field_associate_type', $termId, '=')
    ->sort('title')
    ->execute();

  // Start building out the options for our select list
  $associate_options = [];
  $location_options = [];
  $locations = [];
  $field_name = '';
  $empty_option = NULL;
  $nodes = $storage->loadMultiple($nids);

  // Push titles into select list
  if (!empty($nodes)) {
    foreach ($nodes as $node) {
      $title = $node->getTitle();
      $location = $node->get('field_location')->getString();
      $associate_options[$title] = $title;
      $locations[$location] = $location;
    }

    // Format the location.
    foreach ($locations as $location) {
      $exploded_location = explode(',', $location);
      // Convert the state name to the abbreviation.
      if (count($exploded_location) === 2) {
        $state = $exploded_location[1];
        $location_options[$location] = $state . ' - ' . $exploded_location[0];
      }
      else {
        $location_options[$location] = $location;
      }
    }
  }

  // Sort Arrays.
  asort($associate_options);
  asort($location_options);
  // Remove Internet Lender from end of array and place in the beginning.
  if ($form['#id'] === 'views-exposed-form-mortgage-loan-officer-block-mortgage-block') {
    unset($location_options['Internet Lender']);
    $location_options = ['Internet Lender' => 'Internet Lender'] + $location_options;
  }

  $select_fields = [
    'field_associate',
    'field_location',
  ];

  foreach ($select_fields as $select_field) {
    $options = [];
    if ($select_field === 'field_associate') {
      $options = $associate_options;
      $empty_option = $select_option;
      $field_name = 'title';
    }
    elseif ($select_field === 'field_location') {
      $options = $location_options;
      $empty_option = 'Select Location';
      $field_name = 'field_location_value';
    }

    // Start building out our new form elements
    $form[$field_name]['#type'] = 'select';
    $form[$field_name]['#multiple'] = FALSE;

    // Specify the empty option for our select list
    $form[$field_name]['#empty_option'] = $empty_option;

    // Add the $options from above to our select list
    $options = [NULL => $empty_option] + $options;
    $form[$field_name]['#options'] = $options;
    unset($form[$field_name]['#size']);
  }
}


/**
 * Implements hook_views_pre_view().
 *
 * Alters the view.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   view.
 */
function arvestbank_views_views_pre_view(\Drupal\views\ViewExecutable $view, $display_id, array &$args) {

  // Filters by category delta=0.  If searching by category remove this filter.
  if (!empty($view->getExposedInput()['field_debit_card_category_target_id'])) {
    if ($view->getExposedInput()['field_debit_card_category_target_id'] != "All") {
      $view->removeHandler($view->current_display, 'filter', 'delta');
    }
  }

  if (!empty($view->getExposedInput()['geolocation_zip'])) {

    // Grab the zip from the filter.
    $zip = $view->getExposedInput()['geolocation_zip'];

    // Get the current filters
    $filters = $view->getExposedInput();

    // Geolocate the zip code.
    // First try GoogleMap API.
//    $url = "https://maps.googleapis.com/maps/api/geocode/json?address=".urlencode($zip)."&key=AIzaSyAd57cbqi7q8YBaYjcQR3Iqw6tkjMsjyIA";
//    $result_string = file_get_contents($url);
//    $result = json_decode($result_string, true);
//    dump($result);
//    $result1[]=$result['results'][0];
//    $result2[]=$result1[0]['geometry'];
//    $result3[]=$result2[0]['location'];
//    dump($result3);die();
//
//    return $result3[0];

    // Fallback to the big static array.
    if ($coords = \Drupal::service('arvestbank_zipcodes.geolocate')->zipCoords($zip)) {
      $filters['center']['coordinates'] = $coords;
      $view->setExposedInput($filters);
    }

  }

}


/**
 * Implements hook_views_prerenders().
 *
 * Alters the view results.
 *
 * @param \Drupal\views\ViewExecutable $view
 */
function arvestbank_views_views_post_execute(ViewExecutable $view) {
  if ($view->id() === 'documents_and_resources' || $view->id() === 'education_details') {
    foreach ($view->result as $key => $value) {
      $link = $value->_entity->field_link->getValue();
      if (!empty($link)) {
        $link_value = $link[0]['uri'];
        if (!$external = UrlHelper::isExternal($link_value)) {
          break;
        }
        else {
          $get_title = NULL;
          $set_title = NULL;
          switch($view->id()) {
            case 'documents_and_resources':
              $get_title = $value->media_field_data_name;
              $set_title = 'name';
              break;
            case 'education_details':
              $get_title = $value->node_field_data_title;
              $set_title = 'title';
              break;
          }

          $link_text = $get_title;
          $url = Url::fromUri($link_value);
          $updated_link = \Drupal::service('link_generator')->generate($link_text, $url);
          $value->_entity->set($set_title, $updated_link);
        }
      }
    }
  }

}
