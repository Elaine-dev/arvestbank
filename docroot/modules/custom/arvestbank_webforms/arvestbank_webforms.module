<?php

/**
 * @file
 * Contains arvestbank_webforms.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function arvestbank_webforms_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the arvestbank_webforms module.
    case 'help.page.arvestbank_webforms':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom support for webforms.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function arvestbank_webforms_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  switch ($form_id) {

    // Authorized Agent Designation Form.
    case "webform_submission_authorized_agent_designation_for_add_form":
      // Hide back button on second page.
      if (isset($form['actions']['wizard_prev'])) {
        $form['actions']['wizard_prev']['#access'] = FALSE;
      }
      // Add validation function.
      $form['#validate'][] = '_arvestbank_webforms_authorized_agent_validate';
      break;

    // Auto Warranty Quote Form.
    case 'webform_submission_auto_warranty_quote_add_form':
      // Add validation function.
      $form['#validate'][] = '_arvestbank_webforms_auto_warranty_validate';
      break;

    // Contact Arvest Wealth Management Form.
    case "webform_submission_contact_arvest_wealth_management_add_form":
      // Attach library.
      $form['#attached']['library'][] = 'arvestbank_webforms/contact_arvest_wealth_management';
      break;

    // Credit Card Dispute Form.
    case "webform_submission_credit_card_dispute_add_form":
      // Attach library.
      $form['#attached']['library'][] = 'arvestbank_webforms/credit_card_dispute';
      break;

    // Credit Card Dispute Form.
    case "webform_submission_verifiable_consumer_request_form_add_form":
      // Attach library.
      $form['#attached']['library'][] = 'arvestbank_webforms/verifiable_consumer_request';
      break;

    // Equipment Finance form and test form.
    case 'webform_submission_arvest_equipment_finance_credit__add_form':
    case 'webform_submission_arvest_equipment_finance_credit__test_form':
      // Add validation function.
      $form['#validate'][] = '_arvestbank_webforms_equipment_finance_validate';
      break;

  }

  return $form;

}

/**
 * Validate function for the Equipment Finance Form.
 *
 * @param array $form
 *   The form array passed by reference.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _arvestbank_webforms_equipment_finance_validate(array &$form, FormStateInterface $form_state) {

  // Define custom composite fields for regex validation.
  $customCompositeFieldRegexValidationDefinitions = [
    'principal' => [
      'home_phone' => [
        'regex' => '/^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/',
        'error_message' => 'Please enter a valid phone number.',
      ],
    ],
    'loans_leases' => [
      'phone' => [
        'regex' => '/^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/',
        'error_message' => 'Please enter a valid phone number.',
      ],
    ],
    'bank_references' => [
      'phone' => [
        'regex' => '/^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/',
        'error_message' => 'Please enter a valid phone number.',
      ],
    ],
    'trade_references' => [
      'phone' => [
        'regex' => '/^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}$/',
        'error_message' => 'Please enter a valid phone number.',
      ],
    ],
  ];

  // Get values submitted by the user.
  $enteredValues = $form_state->getValues();

  // Loop over composite fields.
  foreach ($customCompositeFieldRegexValidationDefinitions as $customCompositeField => $regexValidations) {

    // If this field has values.
    if (isset($enteredValues[$customCompositeField]) && count($enteredValues[$customCompositeField])) {

      // Loop over the subfields we want to validate.
      foreach ($regexValidations as $subFieldToValidate => $validationInfo) {

        // Loop over the multiple values for the composite field.
        foreach ($enteredValues[$customCompositeField] as $compositeFieldIndex => $compositeFieldValue) {

          // If the subfield has a value.
          if (
            isset($enteredValues[$customCompositeField][$compositeFieldIndex][$subFieldToValidate])
            && $enteredValues[$customCompositeField][$compositeFieldIndex][$subFieldToValidate] != ''
          ) {
            // Get the value we want to validate.
            $fieldValueToValidate = $enteredValues[$customCompositeField][$compositeFieldIndex][$subFieldToValidate];
            // Perform the regex match.
            preg_match($validationInfo['regex'], $fieldValueToValidate, $matches);
            // If we didn't get a match on the whole entered value.
            if (
              !count($matches)
              || $matches[0] != $fieldValueToValidate
            ) {
              $form_state->setErrorByName(
                $customCompositeField . '][' . $subFieldToValidate,
                $validationInfo['error_message']
              );
            }
          }

        }

      }

    }

  }

}

/**
 * Validate function for the Authorized Agent Designation Form.
 *
 * @param array $form
 *   The form array passed by reference.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _arvestbank_webforms_authorized_agent_validate(array &$form, FormStateInterface $form_state) {

  // If the form has a zip code entered.
  if (
    is_array($form_state->getValue('address'))
    && isset($form_state->getValue('address')['postal_code'])
  ) {
    // Get zip code value.
    $zipCode = $form_state->getValue('address')['postal_code'];
    // If the zip code is not 5 characters long.
    if (count(str_split($zipCode)) != 5) {
      // Set an error on the zip code field.
      $form_state->setErrorByName('consumer_zip', t('Please enter a valid zip code.'));
    }
  }

  // If the form has an authorized agent address entered.
  if (
    is_array($form_state->getValue('authorized_agent_address'))
    && isset($form_state->getValue('authorized_agent_address')['postal_code'])
  ) {
    // Get zip code value.
    $zipCode = $form_state->getValue('authorized_agent_address')['postal_code'];
    // If the zip code is not 5 characters long.
    if (count(str_split($zipCode)) != 5) {
      // Set an error on the zip code field.
      $form_state->setErrorByName('consumer_zip', t('Please enter a valid zip code.'));
    }
  }

}

/**
 * Validate function for the Auto Warranty Quote form.
 *
 * @param array $form
 *   The form array passed by reference.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _arvestbank_webforms_auto_warranty_validate(array &$form, FormStateInterface $form_state) {

  // If the form has a zip code entered.
  if (
    is_array($form_state->getValue('address'))
    && isset($form_state->getValue('address')['postal_code'])
  ) {

    // Get zip code value.
    $zipCode = $form_state->getValue('address')['postal_code'];

    // If the zip code is not 5 characters long.
    if (count(str_split($zipCode)) != 5) {
      // Set an error on the zip code field.
      $form_state->setErrorByName('consumer_zip', t('Please enter a valid zip code.'));
    }

  }

}
